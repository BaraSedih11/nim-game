<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: 'YourNewFont', sans-serif; /* Change 'YourNewFont' to the desired font-family */
            background-color: #f0f0f0;
            text-align: center;
        }

        h1 {
            color: #007BFF; /* Blue color for the game title */
            margin-top: 20px;
            font-size: 28px; /* Increase the font size for the title */
        }

        #game-info h2 {
            font-size: 24px; 
            font-weight: bold; 
            font-family: 'YourNewFont', sans-serif; 
            text-align: left; 
            padding-left: 10px;
        }


        #game-info {
            background-color: #fff;
            padding: 10px;
            border: 2px solid #007BFF; /* Blue border color */
            margin: 10px;
            border-radius: 10px;
            justify-content: space-between; /* Elements appear in a row */
        }
        #game-info-row {
            display: flex;
            background-color: #fff;
            padding: 10px;
            margin: 10px;
            justify-content: space-between; /* Elements appear in a row */
            margin-left: 40px;
            margin-right: 40px;
        }

        #game-info p {
            font-size: 20px; /* Increase text size */
            font-weight: bold; /* Apply bold font */
            font-family: 'YourNewFont', sans-serif; /* Add the desired font-family */
        }


        #sticks-box {
            background-color: #6a7a77; /* Lively orange background color for sticks box */
            padding: 20px;
            margin: 10px;
            margin-top: 20px;
            border: 1px solid #007BFF; /* Blue border color */
            border-radius: 5px;
            justify-content: center;
        }

        #controls {
            margin-top: 20px;
        }

        label {
            color: #007BFF; /* Blue color for labels */
            font-size: 18px; /* Increase the font size for labels */
            font-family: 'YourNewFont', sans-serif; /* Add the desired font-family */
        }

        input, select {
            padding: 15px; /* Increase padding */
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box; /* Include padding and border in width */
            font-size: 18px; /* Increase the font size */
            background-color: #555; /* Dark background for input/select elements */
            color: #fff; /* Light text color for input/select elements */
        }

        button {
            background-color: #007BFF; /* Blue background for buttons */
            color: #fff;
            padding: 15px 30px; /* Increase padding for the button */
            border: none;
            border-radius: 5px;
            margin: 10px 5px; /* Adjust margin for the buttons */
            cursor: pointer;
            transition: background-color 0.3s;
            font-size: 18px; /* Increase the font size for the button text */
        }

        button:hover {
            background-color: #0056b3; /* Darker blue on hover */
        }

        button:active {
            background-color: #003966; /* Even darker blue when pressed */
        }

        #result {
            font-weight: bold;
            color: #0d324f; /* Red color for the result text */
        }

        #last-move {
            font-style: italic;
        }

        /* Style for the individual sticks */
        .stick {
            width: 100px; /* Adjust the width as needed */
            height: auto; /* Maintain the aspect ratio */
            margin-right: 5px; /* Add some spacing between sticks */
        }

        #game-shows {
            background-color: #f0f0f0; /* Background color */
            border: 2px solid #007BFF; /* Border color */
            border-radius: 10px;
            padding: 10px;
            margin: 10px;
            text-align: center;
            display: flex;
            justify-content: space-between; /* Elements appear in a row */
            padding-left: 50px;
            padding-right: 500px;
        }

        #last-move, #result {
            font-size: 18px;
            font-weight: bold;
            color: #333; /* Text color */
            font-family: 'YourNewFont', sans-serif; /* Font family */
            margin: 10px;
        }

        .selected {
            transition: transform 0.2s, border 0.2s, box-shadow 0.2s; /* Add transition for smooth effect */
            cursor: pointer; /* Change the cursor to a pointer */
        }

        /* Style for the button container */
        #sticks-box {
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            margin: 10px;
        }

        /* Style for the button */
        .stick-button {
            background: none; /* Set the background to transparent or none */
            border: none; /* Remove any border */
            padding: 0; /* Remove padding */
            cursor: pointer;
        }

        /* Style for the image inside the button */
        .stick-button img {
            width: 100px; /* Set the width of the image */
            height: auto; /* Maintain the aspect ratio */
            transition: transform 0.2s; /* Add a transition for a smooth effect on hover */
        }

        /* Hover effect for the image */
        .stick-button:hover img {
            transform: scale(1.1); /* Scale the image slightly on hover */
        }

        .stick-button:hover {
            background-color: #354a35; /* Green on hover */
            color: #fff; /* Change text color to white */
        }

        /* Style for the stick button when clicked */
        .stick-button:active {
            background-color: #202d20; /* Darker green when clicked */
            color: #fff; /* Change text color to white */
        }

        /* Style for the selected button */
        .stick-button.selected {
            background-color: #202d20; /* Darker green like active state */
            color: #fff; /* Change text color to white */
        }

    </style>
    <script type="text/javascript">
        let player1, player2;

        const sticksNumber = <%= sticks %>;
        const sticksArray = [];

        if(sticksNumber == 4){
            sticksArray[0] = 1;
            sticksArray[1] = 3;
        } else if(sticksNumber == 9){
            sticksArray[0] = 1;
            sticksArray[1] = 3;
            sticksArray[2] = 5;
        } else if(sticksNumber == 16){
            sticksArray[0] = 1;
            sticksArray[1] = 3;
            sticksArray[2] = 5;
            sticksArray[3] = 7;
        }

        const selectedSticks = [];

    </script>
</head>
<body>
    <h1>Nim Game</h1>
    <div id="game-info">
        <h2>Game Information:</h2>
        <div id="game-info-row">
            <p><strong>Number of sticks:</strong> <span id="gameInfo"><%= sticks %></span></p>
            <p><strong>Level:</strong> <span id="gameInfo"><%= level %></span></p>
            <p><strong>Player 1:</strong> <span id="username"><%= username %></span></p>
            <p><strong>Player 2:</strong> <span id="pc">PC</span></p>
            <p><strong>Game type:</strong> <span id="gameType"><%= gameType %></span></p>
        </div>
    </div>
    

    <div id="game-container">
        <div id="sticks-box">
            <!-- Sticks will be dynamically added using JavaScript -->
        </div>
        <div id="controls">
            <button id="start-game" onclick="startGame()">Start Game</button>
            <button id="reset-game" onclick="resetGame()">Reset</button>
            <button id="make-move">Make Move</button>
            <button id="exit-game" onclick="exitGame()">Exit</button>
        </div>
    </div>

    <div id="game-shows">
        <p id="last-move"><strong>Last move:</strong></p>
        <p id="result"><strong>Result:</strong></p>
    </div>
    <script type="text/javascript">
        function generateSticks() {
            const sticksBox = document.getElementById('sticks-box');
            const stickImageSrc = '../images/stick.png';
            let sticksInRow = 1; // Number of sticks in the current row

            for (let i = 0; i < sticksNumber; i++) {
                for (let j = 0; j < sticksInRow; j++, i++) {
                    // Create a button element
                    const button = document.createElement('button');
                    button.className = 'stick-button'; // Add a class for styling

                    // // Calculate the row number and add it as a class
                    // const rowNumber = Math.floor(i / sticksInRow) + 1;
                    // button.className = `stick-button row-${rowNumber}`;

                    // Create an image element and set its source
                    const stick = document.createElement('img');
                    stick.src = stickImageSrc;
                    stick.alt = 'Stick Image'; // Add alt text for accessibility

                    // Append the image to the button
                    button.appendChild(stick);

                    // Append the button to the sticksBox
                    sticksBox.appendChild(button);
                }

                sticksInRow += 2; // Increase the number of sticks in the next row
                const lineBreak = document.createElement('br');
                sticksBox.appendChild(lineBreak);
            }

            // Get all the stick button elements
            const stickButtons = document.querySelectorAll('.stick-button');

            // Add a click event listener to each stick button
            stickButtons.forEach((stickButton, index) => {
                stickButton.addEventListener('click', () => {
                    // Toggle the selected class to simulate the active state
                    stickButton.classList.toggle('selected');

                    // Update the value based on the active state
                    if (stickButton.classList.contains('selected')) {
                        // Set the value for the active state (e.g., 1)
                        stickButton.value = 1;
                    } else {
                        // Set the value for the inactive state (e.g., 0)
                        stickButton.value = 0;
                    }

                    // Adjust the index to start from 1 and assign it as the unique ID
                    stickButton.id = `stick-${index + 1}`;

                    let buttonIndex = parseInt(stickButton.id.split('-')[1], 10);
                    console.log(buttonIndex);

                    if(buttonIndex == 1) {
                        stickButton.classList.add(`row-${1}`);
                    } else if(buttonIndex > 1 && buttonIndex <= 4) {
                        stickButton.classList.add(`row-${2}`);
                    } else if(buttonIndex > 4 && buttonIndex <= 9) {
                        stickButton.classList.add(`row-${3}`);
                    } else if(buttonIndex > 9 && buttonIndex <= 16){
                        stickButton.classList.add(`row-${4}`);
                    }                  

                });
            });


        }


        // Call the function when the page loads
        window.onload = function () {
            generateSticks();
        };


        // handling the buttons
        
        function startGame(){

            resetGame();
            
            const randomValue = Math.random();
            let startingPlayer;
            if (randomValue < 0.5) {
                startingPlayer = 1;
            } else {
                startingPlayer = 2;
            }
            
            if(startingPlayer == 1){
                
                let isPlayer1Turn = true; 

                // Get all the stick button elements
                const stickButtons = document.querySelectorAll('.stick-button');

                stickButtons.forEach((stickButton, index) => { 
                    stickButton.addEventListener('click', () => {
                        console.log('Clicked');
                        // Check if the button is in the same row as the previously selected button
                        if (isButtonInSameRowAsPreviouslySelected(stickButton)) {
                            console.log(true);
                            // Toggle the selected class to simulate the active state
                            stickButton.classList.toggle('selected');
                        }
                        console.log("hi");
                        deactivateButtonsInOtherRows(stickButton);
                    });
                });

                function isButtonInSameRowAsPreviouslySelected(currentButton) {
                    // Get the row class of the previously selected button
                    const prevSelectedButton = document.querySelector('.selected');
                    const prevSelectedRowClass = prevSelectedButton ? prevSelectedButton.classList[1] : null;

                    // Get the row class of the current button
                    const currentRowClass = currentButton.classList[1];

                    // Check if the current button and the previously selected button are in the same row
                    return prevSelectedRowClass === currentRowClass;
                }

                function deactivateButtonsInOtherRows(currentButton) {
                    // Get the row class of the current button
                    const currentRowClass = currentButton.classList[1];

                    // Find all buttons with the same row class as the current button
                    const buttonsInCurrentRow = document.querySelectorAll(`.stick-button.${currentRowClass}`);

                    // Find all buttons in other rows
                    const buttonsInOtherRows = document.querySelectorAll(`.stick-button:not(.${currentRowClass})`);

                    // Disable all buttons in other rows
                    buttonsInOtherRows.forEach(button => {
                        button.disabled = true;
                    });

                    // Enable all buttons in the current row
                    buttonsInCurrentRow.forEach(button => {
                        button.disabled = false;
                    });
                }




            } else if (startingPlayer == 2){

            }

        }

        // Handle the "Move" button click event
        const moveButton = document.getElementById('make-move');
        moveButton.addEventListener('click', () => {
            console.log('Selected sticks: ', selectedSticks);
            // Implement your game logic here


        });

        function resetGame() {
            console.log('Reset Game');
            // Clear existing sticks
            const sticksBox = document.getElementById('sticks-box');
            sticksBox.innerHTML = '';
            // Generate new sticks
            generateSticks();
        }
       
        function exitGame() {
            fetch('/game/logout', {
                method: 'GET', 
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            .then(response => {
                if (response.ok) {
                    window.location.href = '/game'; 
                } else {
                    console.error('Logout request failed');
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }


    </script>
</body>
</html>
